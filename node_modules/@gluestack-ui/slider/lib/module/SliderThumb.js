function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef, useEffect } from 'react';
import { Platform } from 'react-native';
import { useSliderThumb } from '@react-native-aria/slider';
import { VisuallyHidden } from '@react-aria/visually-hidden';
import { SliderContext } from './Context';
import { useHover } from '@react-native-aria/interactions';
import { mergeRefs } from '@gluestack-ui/utils';
import { useFocusRing, useFocus } from '@react-native-aria/focus';
import { composeEventHandlers } from '@gluestack-ui/utils';
function SliderThumb(StyledSliderThumb, StyledSliderThumbInteraction) {
  return /*#__PURE__*/forwardRef((_ref2, ref) => {
    var _thumbStyles$transfor;
    let {
      children,
      scaleOnPressed = 1,
      style,
      ...props
    } = _ref2;
    const [thumbSize, setThumbSize] = React.useState({
      height: 0,
      width: 0
    });
    const _ref = React.useRef(null);
    const {
      isHovered
    } = useHover({}, _ref);
    const {
      state,
      trackLayout,
      orientation,
      isDisabled,
      isReversed,
      isPressed,
      setIsHovered,
      setIsPressed,
      setIsFocused,
      setIsFocusVisible
    } = React.useContext(SliderContext);
    const inputRef = React.useRef(null);
    const {
      thumbProps,
      inputProps
    } = useSliderThumb({
      index: 0,
      trackLayout,
      inputRef,
      orientation: orientation
    }, state);
    const {
      isFocusVisible,
      focusProps: focusRingProps
    } = useFocusRing();
    const {
      isFocused,
      focusProps
    } = useFocus();
    const thumbStyles = {
      bottom: isReversed ? orientation === 'vertical' ? `${state.getThumbPercent(0) * 100}%` : undefined : orientation === 'vertical' ? `${state.getThumbPercent(0) * 100}%` : undefined,
      left: isReversed ? orientation !== 'vertical' ? `${state.getThumbPercent(0) * 100}%` : undefined : orientation !== 'vertical' ? `${state.getThumbPercent(0) * 100}%` : undefined,
      transform: orientation === 'vertical' ? [{
        translateY: (thumbSize === null || thumbSize === void 0 ? void 0 : thumbSize.height) / 2
      }] : [{
        translateX: -(thumbSize === null || thumbSize === void 0 ? void 0 : thumbSize.height) / 2
      }]
    };
    thumbStyles === null || thumbStyles === void 0 ? void 0 : (_thumbStyles$transfor = thumbStyles.transform) === null || _thumbStyles$transfor === void 0 ? void 0 : _thumbStyles$transfor.push({
      scale: state.isThumbDragging(0) ? scaleOnPressed : 1
    });
    useEffect(() => {
      setIsPressed(state.isThumbDragging(0));
    }, [state, setIsPressed, isPressed]);
    useEffect(() => {
      setIsFocused(isFocused);
    }, [isFocused, setIsFocused]);
    useEffect(() => {
      setIsFocusVisible(isFocusVisible);
    }, [isFocusVisible, setIsFocusVisible]);
    useEffect(() => {
      setIsHovered(isHovered);
    }, [isHovered, setIsHovered]);
    return /*#__PURE__*/React.createElement(StyledSliderThumb, _extends({
      onLayout: layout => {
        var _layout$nativeEvent, _layout$nativeEvent$l, _layout$nativeEvent2, _layout$nativeEvent2$;
        setThumbSize({
          height: layout === null || layout === void 0 ? void 0 : (_layout$nativeEvent = layout.nativeEvent) === null || _layout$nativeEvent === void 0 ? void 0 : (_layout$nativeEvent$l = _layout$nativeEvent.layout) === null || _layout$nativeEvent$l === void 0 ? void 0 : _layout$nativeEvent$l.height,
          width: layout === null || layout === void 0 ? void 0 : (_layout$nativeEvent2 = layout.nativeEvent) === null || _layout$nativeEvent2 === void 0 ? void 0 : (_layout$nativeEvent2$ = _layout$nativeEvent2.layout) === null || _layout$nativeEvent2$ === void 0 ? void 0 : _layout$nativeEvent2$.width
        });
      },
      states: {
        hover: isHovered,
        focus: isFocused,
        active: isPressed,
        disabled: isDisabled,
        focusVisible: isFocusVisible
      },
      disabled: isDisabled
    }, thumbProps, {
      style: {
        ...style,
        ...thumbStyles
      }
      // @ts-ignore - web only
      ,
      onFocus: composeEventHandlers(composeEventHandlers(props === null || props === void 0 ? void 0 : props.onFocus, focusProps.onFocus), focusRingProps.onFocus)
      // @ts-ignore - web only
      ,
      onBlur: composeEventHandlers(composeEventHandlers(props === null || props === void 0 ? void 0 : props.onBlur, focusProps.onBlur), focusRingProps.onBlur),
      ref: mergeRefs([_ref, ref])
    }, props), /*#__PURE__*/React.createElement(StyledSliderThumbInteraction, {
      states: {
        hover: isHovered,
        focus: isFocused,
        focusVisible: isFocusVisible,
        disabled: isDisabled,
        active: isPressed
      }
    }, children, Platform.OS === 'web' && /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement("input", _extends({
      ref: inputRef
    }, inputProps)))));
  });
}
export default SliderThumb;
//# sourceMappingURL=SliderThumb.js.map