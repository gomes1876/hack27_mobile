/// <reference types="react" />
export declare const Menu: import("@gluestack-ui/menu/lib/typescript/types").IMenuComponentType<Omit<Omit<import("react-native").Animated.AnimatedProps<(Omit<import("@expo/html-elements/build/primitives/View").WebViewProps & Omit<import("react-native").ViewProps & import("react").ClassAttributes<typeof import("react-native").View>, "style" | "accessibilityRole">, "ref"> & import("react").RefAttributes<import("react").Component<import("@expo/html-elements/build/primitives/View").ViewProps, any, any>>) | (Omit<import("@expo/html-elements/build/primitives/View").WebViewProps & Omit<import("react-native").ViewProps & import("react").ClassAttributes<typeof import("react-native").View>, "style" | "accessibilityRole">, "ref"> & {
    ref?: ((instance: typeof import("react-native").View | null) => void) | import("react").RefObject<typeof import("react-native").View> | null | undefined;
})> & import("@legendapp/motion").MotionComponentProps<import("react").ComponentType<import("@expo/html-elements/build/primitives/View").ViewProps>, import("@expo/html-elements/build/primitives/View").ViewStyle, unknown, unknown, unknown>, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<((false | import("react-native").Animated.Value | import("react-native").Animated.AnimatedInterpolation<string | number> | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle> | import("react-native").Animated.WithAnimatedObject<import("@expo/html-elements/build/primitives/View").ViewStyle> | import("react-native").Animated.WithAnimatedArray<import("react-native").Falsy | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle> | import("react-native").RecursiveArray<import("react-native").Falsy | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle>> | readonly (import("react-native").Falsy | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle>)[]>) & (false | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle> | import("react-native").RecursiveArray<import("react-native").Falsy | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle>>)) | null | undefined, unknown, import("react-native").Animated.AnimatedProps<(Omit<import("@expo/html-elements/build/primitives/View").WebViewProps & Omit<import("react-native").ViewProps & import("react").ClassAttributes<typeof import("react-native").View>, "style" | "accessibilityRole">, "ref"> & import("react").RefAttributes<import("react").Component<import("@expo/html-elements/build/primitives/View").ViewProps, any, any>>) | (Omit<import("@expo/html-elements/build/primitives/View").WebViewProps & Omit<import("react-native").ViewProps & import("react").ClassAttributes<typeof import("react-native").View>, "style" | "accessibilityRole">, "ref"> & {
    ref?: ((instance: typeof import("react-native").View | null) => void) | import("react").RefObject<typeof import("react-native").View> | null | undefined;
})> & import("@legendapp/motion").MotionComponentProps<import("react").ComponentType<import("@expo/html-elements/build/primitives/View").ViewProps>, import("@expo/html-elements/build/primitives/View").ViewStyle, unknown, unknown, unknown>>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<((false | import("react-native").Animated.Value | import("react-native").Animated.AnimatedInterpolation<string | number> | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle> | import("react-native").Animated.WithAnimatedObject<import("@expo/html-elements/build/primitives/View").ViewStyle> | import("react-native").Animated.WithAnimatedArray<import("react-native").Falsy | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle> | import("react-native").RecursiveArray<import("react-native").Falsy | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle>> | readonly (import("react-native").Falsy | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle>)[]>) & (false | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle> | import("react-native").RecursiveArray<import("react-native").Falsy | import("@expo/html-elements/build/primitives/View").ViewStyle | import("react-native").RegisteredStyle<import("@expo/html-elements/build/primitives/View").ViewStyle>>)) | null | undefined>> & {
    as?: any;
}, "ref"> & import("react").RefAttributes<import("react-native").Animated.AnimatedProps<(Omit<import("@expo/html-elements/build/primitives/View").WebViewProps & Omit<import("react-native").ViewProps & import("react").ClassAttributes<typeof import("react-native").View>, "style" | "accessibilityRole">, "ref"> & import("react").RefAttributes<import("react").Component<import("@expo/html-elements/build/primitives/View").ViewProps, any, any>>) | (Omit<import("@expo/html-elements/build/primitives/View").WebViewProps & Omit<import("react-native").ViewProps & import("react").ClassAttributes<typeof import("react-native").View>, "style" | "accessibilityRole">, "ref"> & {
    ref?: ((instance: typeof import("react-native").View | null) => void) | import("react").RefObject<typeof import("react-native").View> | null | undefined;
})> & import("@legendapp/motion").MotionComponentProps<import("react").ComponentType<import("@expo/html-elements/build/primitives/View").ViewProps>, import("@expo/html-elements/build/primitives/View").ViewStyle, unknown, unknown, unknown>>, Omit<Omit<import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<import("react-native").StyleProp<import("react-native").ViewStyle> | ((state: import("react-native").PressableStateCallbackType) => import("react-native").StyleProp<import("react-native").ViewStyle>), unknown, import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<import("react-native").StyleProp<import("react-native").ViewStyle> | ((state: import("react-native").PressableStateCallbackType) => import("react-native").StyleProp<import("react-native").ViewStyle>)>> & {
    as?: any;
}, "ref"> & import("react").RefAttributes<import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>>, Omit<import("react-native").TextProps, "size"> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<import("react-native").StyleProp<import("react-native").TextStyle>, {
    size: {
        xs: unknown;
        sm: unknown;
        md: unknown;
        lg: unknown;
        xl: unknown;
        '2xl': unknown;
        '3xl': unknown;
        '4xl': unknown;
        '5xl': unknown;
        '6xl': unknown;
    };
}, import("react-native").TextProps>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<import("react-native").StyleProp<import("react-native").TextStyle>>> & {
    as?: any;
} & import("react").RefAttributes<import("react-native").TextProps>>;
export declare const MenuItem: import("react").MemoExoticComponent<(props: Omit<Omit<import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<import("react-native").StyleProp<import("react-native").ViewStyle> | ((state: import("react-native").PressableStateCallbackType) => import("react-native").StyleProp<import("react-native").ViewStyle>), unknown, import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<import("react-native").StyleProp<import("react-native").ViewStyle> | ((state: import("react-native").PressableStateCallbackType) => import("react-native").StyleProp<import("react-native").ViewStyle>)>> & {
    as?: any;
}, "ref"> & import("react").RefAttributes<import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>> & import("react-stately").ItemProps<Omit<Omit<import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<import("react-native").StyleProp<import("react-native").ViewStyle> | ((state: import("react-native").PressableStateCallbackType) => import("react-native").StyleProp<import("react-native").ViewStyle>), unknown, import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<import("react-native").StyleProp<import("react-native").ViewStyle> | ((state: import("react-native").PressableStateCallbackType) => import("react-native").StyleProp<import("react-native").ViewStyle>)>> & {
    as?: any;
}, "ref"> & import("react").RefAttributes<import("react-native").PressableProps & import("react").RefAttributes<import("react-native").View>>> & import("@gluestack-ui/menu/lib/typescript/types").IItemProp) => JSX.Element>;
export declare const MenuItemLabel: import("react").MemoExoticComponent<(props: Omit<import("react-native").TextProps, "size"> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<import("react-native").StyleProp<import("react-native").TextStyle>, {
    size: {
        xs: unknown;
        sm: unknown;
        md: unknown;
        lg: unknown;
        xl: unknown;
        '2xl': unknown;
        '3xl': unknown;
        '4xl': unknown;
        '5xl': unknown;
        '6xl': unknown;
    };
}, import("react-native").TextProps>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<import("react-native").StyleProp<import("react-native").TextStyle>>> & {
    as?: any;
} & import("react").RefAttributes<import("react-native").TextProps>) => JSX.Element>;
