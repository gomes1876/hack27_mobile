/// <reference types="react" />
export declare const Tooltip: import("@gluestack-ui/tooltip/lib/typescript/types").IToolTipComponentType<Omit<import("react-native").ViewProps, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<import("react-native").StyleProp<import("react-native").ViewStyle>, unknown, import("react-native").ViewProps>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<import("react-native").StyleProp<import("react-native").ViewStyle>>> & {
    as?: any;
} & import("react").RefAttributes<import("react-native").ViewProps>, Omit<Omit<import("react-native").Animated.AnimatedProps<import("react-native").ViewProps & import("react").RefAttributes<import("react-native").View>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").View, import("react-native").ViewStyle, unknown, unknown, unknown>, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<((false | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").Animated.Value | import("react-native").Animated.AnimatedInterpolation<string | number> | import("react-native").Animated.WithAnimatedObject<import("react-native").ViewStyle> | import("react-native").Animated.WithAnimatedArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>> | readonly (import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>)[]>) & (false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>>)) | null | undefined, unknown, import("react-native").Animated.AnimatedProps<import("react-native").ViewProps & import("react").RefAttributes<import("react-native").View>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").View, import("react-native").ViewStyle, unknown, unknown, unknown>>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<((false | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").Animated.Value | import("react-native").Animated.AnimatedInterpolation<string | number> | import("react-native").Animated.WithAnimatedObject<import("react-native").ViewStyle> | import("react-native").Animated.WithAnimatedArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>> | readonly (import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>)[]>) & (false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>>)) | null | undefined>> & {
    as?: any;
}, "ref"> & import("react").RefAttributes<import("react-native").Animated.AnimatedProps<import("react-native").ViewProps & import("react").RefAttributes<import("react-native").View>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").View, import("react-native").ViewStyle, unknown, unknown, unknown>>, Omit<import("react-native").TextProps, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<import("react-native").StyleProp<import("react-native").TextStyle>, unknown, import("react-native").TextProps>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<import("react-native").StyleProp<import("react-native").TextStyle>>> & {
    as?: any;
} & import("react").RefAttributes<import("react-native").TextProps>>;
export declare const TooltipContent: import("react").MemoExoticComponent<(props: Omit<Omit<import("react-native").Animated.AnimatedProps<import("react-native").ViewProps & import("react").RefAttributes<import("react-native").View>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").View, import("react-native").ViewStyle, unknown, unknown, unknown>, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<((false | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").Animated.Value | import("react-native").Animated.AnimatedInterpolation<string | number> | import("react-native").Animated.WithAnimatedObject<import("react-native").ViewStyle> | import("react-native").Animated.WithAnimatedArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>> | readonly (import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>)[]>) & (false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>>)) | null | undefined, unknown, import("react-native").Animated.AnimatedProps<import("react-native").ViewProps & import("react").RefAttributes<import("react-native").View>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").View, import("react-native").ViewStyle, unknown, unknown, unknown>>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<((false | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").Animated.Value | import("react-native").Animated.AnimatedInterpolation<string | number> | import("react-native").Animated.WithAnimatedObject<import("react-native").ViewStyle> | import("react-native").Animated.WithAnimatedArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>> | readonly (import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>)[]>) & (false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<import("react-native").ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").ViewStyle>>)) | null | undefined>> & {
    as?: any;
}, "ref"> & import("react").RefAttributes<import("react-native").Animated.AnimatedProps<import("react-native").ViewProps & import("react").RefAttributes<import("react-native").View>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").View, import("react-native").ViewStyle, unknown, unknown, unknown>>) => JSX.Element>;
export declare const TooltipText: import("react").MemoExoticComponent<(props: Omit<import("react-native").TextProps, never> & Partial<import("@gluestack-style/react/lib/typescript/types").ComponentProps<import("react-native").StyleProp<import("react-native").TextStyle>, unknown, import("react-native").TextProps>> & Partial<import("@gluestack-style/react/lib/typescript/types").UtilityProps<import("react-native").StyleProp<import("react-native").TextStyle>>> & {
    as?: any;
} & import("react").RefAttributes<import("react-native").TextProps>) => JSX.Element>;
