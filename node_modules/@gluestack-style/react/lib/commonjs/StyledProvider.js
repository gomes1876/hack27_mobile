"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useStyled = exports.defaultConfig = exports.StyledProvider = void 0;
var _colorMode = require("./core/colorMode");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _propertyTokenMap = require("./propertyTokenMap");
var _utils = require("./utils");
var _createGlobalStylesWeb = require("./createGlobalStylesWeb");
var _createGlobalStyles = require("./createGlobalStyles");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
let colorModeSet = false;
const defaultConfig = {
  config: {},
  colorMode: 'light'
};
exports.defaultConfig = defaultConfig;
const defaultContextData = defaultConfig;
const StyledContext = /*#__PURE__*/React.createContext(defaultContextData);
const setCurrentColorMode = currentColorMode => {
  if (currentColorMode) {
    (0, _colorMode.set)(currentColorMode === 'dark' ? 'dark' : 'light');
    colorModeSet = true;
  }
};
const StyledProvider = _ref => {
  let {
    config,
    colorMode,
    children,
    globalStyles
  } = _ref;
  const currentConfig = React.useMemo(() => {
    //TODO: Add this later
    return (0, _utils.platformSpecificSpaceUnits)(config, _reactNative.Platform.OS);
  }, [config]);
  if (_reactNative.Platform.OS === 'web' && globalStyles) {
    const globalStyleInjector = (0, _createGlobalStylesWeb.createGlobalStylesWeb)(globalStyles);
    globalStyleInjector({
      ...currentConfig,
      propertyTokenMap: _propertyTokenMap.propertyTokenMap
    });
  }
  const currentColorMode = React.useMemo(() => {
    return colorMode ?? (0, _colorMode.get)() ?? 'light';
  }, [colorMode]);
  React.useEffect(() => {
    // Add gs class name
    if (_reactNative.Platform.OS === 'web') {
      document.documentElement.classList.add(`gs`);
    }
    (0, _colorMode.onChange)(currentColor => {
      // only for web
      if (_reactNative.Platform.OS === 'web') {
        if (currentColor === 'dark') {
          document.documentElement.classList.remove(`gs-light`);
        } else {
          document.documentElement.classList.remove(`gs-dark`);
        }
        document.documentElement.classList.add(`gs-${currentColor}`);
      }
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  React.useEffect(() => {
    setCurrentColorMode(currentColorMode);
  }, [currentColorMode]);

  // Set colormode for the first time
  if (!colorModeSet) {
    setCurrentColorMode(currentColorMode);
  }
  const globalStyleMap = config.globalStyle && (0, _createGlobalStyles.createGlobalStyles)(config.globalStyle);
  const contextValue = React.useMemo(() => {
    return {
      config: currentConfig,
      globalStyle: globalStyleMap
    };
  }, [currentConfig, globalStyleMap]);
  return /*#__PURE__*/React.createElement(StyledContext.Provider, {
    value: contextValue
  }, children);
};
exports.StyledProvider = StyledProvider;
const useStyled = () => React.useContext(StyledContext);
exports.useStyled = useStyled;
//# sourceMappingURL=StyledProvider.js.map