"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INTERNAL_updateCSSStyleInOrderedResolved = INTERNAL_updateCSSStyleInOrderedResolved;
var _cssify = require("./utils/cssify");
var _stableHash = require("./stableHash");
function getCSSIdAndRuleset(styleValueResolvedWithMeta, objectHash) {
  var _styleValueResolvedWi;
  let prefixClassName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  const toBeInjectedStyle = {
    style: styleValueResolvedWithMeta.resolved
  };
  if (styleValueResolvedWithMeta.meta.queryCondition && styleValueResolvedWithMeta.meta.colorMode) {
    toBeInjectedStyle.condition = styleValueResolvedWithMeta.meta.queryCondition;
    toBeInjectedStyle.colorMode = styleValueResolvedWithMeta.meta.colorMode;
  } else if (styleValueResolvedWithMeta.meta.queryCondition) {
    toBeInjectedStyle.condition = styleValueResolvedWithMeta.meta.queryCondition;
  } else if (styleValueResolvedWithMeta.meta.colorMode) {
    toBeInjectedStyle.colorMode = styleValueResolvedWithMeta.meta.colorMode;
  }
  //@ts-ignore
  const cssObject = _cssify.Cssify.create({
    style: toBeInjectedStyle
  },
  // 'helloworld'
  objectHash + '-' + (0, _stableHash.stableHash)({
    path: styleValueResolvedWithMeta === null || styleValueResolvedWithMeta === void 0 ? void 0 : (_styleValueResolvedWi = styleValueResolvedWithMeta.meta) === null || _styleValueResolvedWi === void 0 ? void 0 : _styleValueResolvedWi.path,
    data: toBeInjectedStyle
  }), prefixClassName);

  // var hr = stableHash({ hello: 'helloworld' });

  // console.log(
  //   toBeInjectedStyle,
  //   stableHash(toBeInjectedStyle),
  //   'consistant hash @@@@'
  // );
  return cssObject;
}
function INTERNAL_updateCSSStyleInOrderedResolved(orderedSXResolved, objectHash) {
  let keepOriginal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  let prefixClassName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  orderedSXResolved.forEach(styleResolved => {
    const cssData = getCSSIdAndRuleset(styleResolved, objectHash, prefixClassName);
    if (!keepOriginal) {
      delete styleResolved.resolved;
      delete styleResolved.original;
    }
    // console.log(styleResolved, 'CSS DATA');
    styleResolved.meta.cssId = cssData.ids.style;
    styleResolved.meta.cssRuleset = cssData.rules.style;
  });
}
//# sourceMappingURL=updateCSSStyleInOrderedResolved.web.js.map