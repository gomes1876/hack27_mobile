import React from 'react';
import type { ConfigType, OrderedSXResolved, StyleIds, ComponentProps, UtilityProps, ITheme, IThemeNew, ExtendedConfigType } from './types';
export declare function getVariantProps(props: any, theme: any, shouldDeleteVariants?: boolean): {
    variantProps: any;
    restProps: any;
};
export declare function verboseStyled<P, Variants>(Component: React.ComponentType<P>, theme: Partial<ITheme<Variants, P>>, componentStyleConfig?: ConfigType, ExtendedConfig?: any, BUILD_TIME_PARAMS?: {
    orderedResolved: OrderedSXResolved;
    styleIds: {
        component: StyleIds;
        descendant: StyleIds;
    };
    themeHash?: string;
}): React.ForwardRefExoticComponent<React.PropsWithoutRef<Omit<P, keyof Variants> & Partial<ComponentProps<P["style"], Variants, P>> & Partial<UtilityProps<P["style"]>> & {
    as?: any;
}> & React.RefAttributes<P>>;
export declare function styled<P, Variants>(Component: React.ComponentType<P>, theme: IThemeNew<Variants, P>, componentStyleConfig?: ConfigType, ExtendedConfig?: ExtendedConfigType, BUILD_TIME_PARAMS?: {
    orderedResolved: OrderedSXResolved;
    styleIds: {
        component: StyleIds;
        descendant: StyleIds;
    };
    themeHash?: string;
}): React.ForwardRefExoticComponent<React.PropsWithoutRef<Omit<P, keyof Variants> & Partial<ComponentProps<P["style"], Variants, P>> & Partial<UtilityProps<P["style"]>> & {
    as?: any;
}> & React.RefAttributes<P>>;
//# sourceMappingURL=styled.d.ts.map