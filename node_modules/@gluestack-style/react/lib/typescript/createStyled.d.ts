/// <reference types="react" />
import type { ConfigType, IThemeNew } from './types';
export interface IStyledPlugin {
    styledUtils?: IStyled;
    register(styledUtils: IStyled): void;
    inputMiddleWare(styledObj: any): void;
    componentMiddleWare?(props: any): void;
}
export declare class IStyled {
    aliases?: any;
    tokens?: any;
    ref?: any;
}
export declare const createStyled: (plugins: any) => <P, Variants>(Component: import("react").ComponentType<P>, styledObject: IThemeNew<Variants, P>, compConfig?: ConfigType, extendedConfig?: any) => import("react").ForwardRefExoticComponent<import("react").PropsWithoutRef<Omit<P, keyof Variants> & Partial<import("./types").ComponentProps<P["style"], Variants, P>> & Partial<import("./types").UtilityProps<P["style"]>> & {
    as?: any;
}> & import("react").RefAttributes<P>>;
//# sourceMappingURL=createStyled.d.ts.map