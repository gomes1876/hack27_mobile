import { get, onChange, set } from './core/colorMode';
import * as React from 'react';
import { Platform } from 'react-native';
import { propertyTokenMap } from './propertyTokenMap';
import { platformSpecificSpaceUnits } from './utils';
import { createGlobalStylesWeb } from './createGlobalStylesWeb';
import { createGlobalStyles } from './createGlobalStyles';
let colorModeSet = false;
export const defaultConfig = {
  config: {},
  colorMode: 'light'
};
const defaultContextData = defaultConfig;
const StyledContext = /*#__PURE__*/React.createContext(defaultContextData);
const setCurrentColorMode = currentColorMode => {
  if (currentColorMode) {
    set(currentColorMode === 'dark' ? 'dark' : 'light');
    colorModeSet = true;
  }
};
export const StyledProvider = _ref => {
  let {
    config,
    colorMode,
    children,
    globalStyles
  } = _ref;
  const currentConfig = React.useMemo(() => {
    //TODO: Add this later
    return platformSpecificSpaceUnits(config, Platform.OS);
  }, [config]);
  if (Platform.OS === 'web' && globalStyles) {
    const globalStyleInjector = createGlobalStylesWeb(globalStyles);
    globalStyleInjector({
      ...currentConfig,
      propertyTokenMap
    });
  }
  const currentColorMode = React.useMemo(() => {
    return colorMode ?? get() ?? 'light';
  }, [colorMode]);
  React.useEffect(() => {
    // Add gs class name
    if (Platform.OS === 'web') {
      document.documentElement.classList.add(`gs`);
    }
    onChange(currentColor => {
      // only for web
      if (Platform.OS === 'web') {
        if (currentColor === 'dark') {
          document.documentElement.classList.remove(`gs-light`);
        } else {
          document.documentElement.classList.remove(`gs-dark`);
        }
        document.documentElement.classList.add(`gs-${currentColor}`);
      }
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  React.useEffect(() => {
    setCurrentColorMode(currentColorMode);
  }, [currentColorMode]);

  // Set colormode for the first time
  if (!colorModeSet) {
    setCurrentColorMode(currentColorMode);
  }
  const globalStyleMap = config.globalStyle && createGlobalStyles(config.globalStyle);
  const contextValue = React.useMemo(() => {
    return {
      config: currentConfig,
      globalStyle: globalStyleMap
    };
  }, [currentConfig, globalStyleMap]);
  return /*#__PURE__*/React.createElement(StyledContext.Provider, {
    value: contextValue
  }, children);
};
export const useStyled = () => React.useContext(StyledContext);
//# sourceMappingURL=StyledProvider.js.map